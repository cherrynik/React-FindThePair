{"version":3,"sources":["components/Cell.js","components/Field.js","App.js","index.js"],"names":["Cell","className","this","props","close","done","onClick","style","background","backgroundImage","Component","Field","initGame","state","cells","Init","Dupe","children","Rand","concat","shuffleCells","map","pair","push","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","renderCell","indexPair","indexArray","key","handleClick","renderField","field","lineLength","rows","item","index","splice","Open","currentCell","setState","shift","setTimeout","check","every","confirm","window","location","reload","Array","keys","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b54305f5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Cell extends Component {\n  render() {\n    return (\n      <div\n        className={'Field__сell' + (this.props.close ? '' : ' Field__cell_flipped') + (this.props.done ? ' Field__cell_done' : '')}\n        onClick={() => {\n          this.props.onClick()\n        }}\n      >\n        <div className='Cell__front-side' style={this.props.close ? {} : { background: this.props.background}}></div>\n        <div className='Cell__back-side' style={{ backgroundImage: 'url(react-back-logo.png)' }}></div>\n      </div>\n    )\n  }\n}\n\nCell.propTypes = {\n  onClick: PropTypes.func,\n  pair: PropTypes.number.isRequired,\n  close: PropTypes.bool.isRequired,\n  done: PropTypes.bool.isRequired,\n  background: PropTypes.string.isRequired\n}\n\nexport default Cell","import React, { Component } from 'react'\nimport Cell from './Cell'\n\nclass Field extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      cells: {\n        Init: [...Array(8).keys()],\n        Dupe: [],\n        Rand: [],\n\n        Open: [],\n\n        children: [],\n        lineLength: 4, // Count of cells in 1 line\n        background: [\n          'bf392b',\n          '9b59b6',\n          '2980b9',\n          '119479',\n          '7ef4b0',\n          'f1c40f',\n          'ffffff',\n          '000000'\n        ]\n      },\n    }\n\n    this.initGame()\n  }\n\n  initGame = () => {\n    let { cells: { Init, Dupe, Rand, children, background } } = this.state\n\n    Dupe = Init.concat(Init) // Duplicating inited array (for pairs)\n    Rand = this.shuffleCells(Dupe) // Randomizing it by shuffleCells func\n    Rand = Dupe\n\n    // Putting default info in each child of already randomized cells\n    Rand.map((pair) => {\n      return children.push({\n        pair,\n        close: true,\n        done: false,\n        background: background[pair]\n      })\n    })\n  }\n\n  shuffleCells = (array) => {\n    let\n      currentIndex = array.length,\n      temporaryValue,\n      randomIndex\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex -= 1\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex]\n      array[currentIndex] = array[randomIndex]\n      array[randomIndex] = temporaryValue\n    }\n    return array\n  }\n\n  /*\n   * There are cannot be default values of close and done vars\n   * Because every cell will work wrong\n   */\n  renderCell = (indexPair, indexArray, close, done, background) => {\n    return (\n      <Cell\n        pair={indexPair}\n        key={indexArray}\n        close={close}\n        done={done}\n        background={'#' + background}\n        onClick={() => this.handleClick(indexArray, indexPair)}\n      />\n    )\n  }\n\n  // TODO: Add comments here and lower\n  renderField = () => {\n    const\n      { cells: { children, lineLength } } = this.state,\n      cells = []\n\n    let\n      field,\n      rows = []\n\n    children.map((item, index) => {\n      cells.push(this.renderCell(item.pair, index, item.close, item.done, item.background))\n      if (cells.length === lineLength) {\n        rows.push(<div className='Field__row' key={`Row_${index}`}>{cells.splice(0, lineLength)}</div>);\n      }\n\n      // Then all line with their cells pushed into Field (parent) \n      return field = <div className='Field' key={`Field_${index}`}>{rows}</div>\n    })\n\n    return field\n  }\n\n  handleClick = (indexArray, indexPair) => {\n    const\n      { cells: { Open, children } } = this.state,\n      currentCell = { indexPair, indexArray }\n\n    if (!(Open.length === 2)) {\n      if (!children[indexArray].done && children[indexArray].close) {\n        children[indexArray].close = false\n        Open.push(currentCell)\n      }\n\n      this.setState({\n        cells: {\n          ...this.state.cells,\n          children: children,\n        }\n      })\n\n      if (Open && (Open.length === 2)) {\n        if (Open[0].indexArray === Open[1].indexArray) {\n          Open.shift()\n        } else {\n          setTimeout(() => this.check(), 1000)\n        }\n      }\n    }\n  }\n\n  check = () => {\n    const { cells: { Open, children } } = this.state\n\n    if (Open[0] && Open[1]) {\n      if (Open[0].indexPair === Open[1].indexPair) {\n        children[Open[0].indexArray].done = true\n        children[Open[1].indexArray].done = true\n      } else {\n        children[Open[0].indexArray].close = true\n        children[Open[1].indexArray].close = true\n      }\n    }\n\n    this.setState({\n      cells: {\n        ...this.state.cells,\n        Open: []\n      }\n    })\n\n    const state = children.every((item) => item.done)\n\n    if (state) {\n      // eslint-disable-next-line no-restricted-globals\n      let ask = confirm('Do you want to restart the game?')\n      if (ask) {\n        window.location.reload()\n      }\n    }\n  }\n\n  render() {\n    return this.renderField()\n  }\n}\n\nexport default Field","import React, { Component } from 'react'\nimport Field from './components/Field'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='Game'>\n        <Field />\n      </div>\n    )\n  }\n}\n\nexport default App","// eslint-disable-next-line no-unused-vars\nimport * as coreJs from 'core-js' // IE 10-11 fix\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'reset-css'\nimport './index.css'\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}